pipeline {
  agent {
    docker {
      image 'kevin557/jenkins-agent-maven-docker:v1'
      args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = 'http://134.209.234.43:9000'
    DOCKER_IMAGE = "kevin557/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins"
    GIT_USER_NAME = "inthrustitrust"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/inthrustitrust/Jenkins.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'mvn -v'
        sh 'ls -la'
        sh '''
          set -e
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          ls -la
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ${DOCKER_IMAGE}
          '''
        }
      }
    }

    stage('Update Deployment File and Push to GitHub') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "kevin.xyz@gmail.com"
            git config user.name "Kevin Abraham"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }

  post {
    always {
      echo 'üîÅ Pipeline completed.'
    }
    success {
      echo '‚úÖ Build succeeded.'
    }
    failure {
      echo '‚ùå Build failed.'
    }
  }
}
